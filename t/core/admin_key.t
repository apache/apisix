#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
use t::APISIX 'no_plan';

repeat_each(1);
no_long_string();
no_root_location();
log_level("info");

run_tests;

__DATA__

=== TEST 1: test admin_key with empty string - should autogenerate during worker init
--- http_config
    lua_shared_dict admin_keys 1m;
--- yaml_config
apisix:
  node_listen: 1984
deployment:
  role: traditional
  role_traditional:
    config_provider: etcd
  admin:
    admin_key:
      - name: "admin"
        key: ""
        role: "admin"
  etcd:
    host:
      - "http://127.0.0.1:2379"
    prefix: "/apisix"
    timeout: 1
--- config
    location /t {
        content_by_lua_block {
            local admin_key = require("apisix.core.admin_key")

            -- Test that admin_key_required returns true
            local required = admin_key.admin_key_required()
            ngx.say("admin_key_required: ", tostring(required))

            -- Test get_admin_keys function (should have autogenerated key from worker init)
            local keys = admin_key.get_admin_keys()
            ngx.say("get_admin_keys type: ", type(keys))
            if keys then
                ngx.say("keys count: ", #keys)
                if keys[1] then
                    ngx.say("first key name: ", keys[1].name or "nil")
                    ngx.say("first key role: ", keys[1].role or "nil")
                    ngx.say("key length: ", string.len(keys[1].key or ""))
                    ngx.say("key is autogenerated: ", tostring(keys[1].autogenerated == true))

                    -- Test that we can use the autogenerated key for API access
                    local http = require "resty.http"
                    local httpc = http.new()

                    local uri = "http://127.0.0.1:" .. ngx.var.server_port .. "/apisix/admin/routes"
                    local res, err = httpc:request_uri(uri, {
                        method = "GET",
                        headers = {
                            ["X-API-KEY"] = keys[1].key
                        }
                    })

                    if res then
                        ngx.say("api access with autogenerated key: ", res.status)
                    else
                        ngx.say("api access failed: ", err or "unknown error")
                    end
                end
            else
                ngx.say("keys: nil")
            end
        }
    }
--- request
GET /t
--- response_body
admin_key_required: true
get_admin_keys type: table
keys count: 1
first key name: admin
first key role: admin
key length: 32
key is autogenerated: true
api access with autogenerated key: 200
--- error_log
WARNING: using empty Admin API.
This will trigger APISIX to automatically generate a random Admin API token.
Generated admin keys for this session:
These keys will change on every restart.
Please modify "admin_key" in conf/config.yaml .



=== TEST 2: test admin_key with valid key - should use configured key
--- http_config
    lua_shared_dict admin_keys 1m;
--- yaml_config
apisix:
  node_listen: 1984
deployment:
  role: traditional
  role_traditional:
    config_provider: etcd
  admin:
    admin_key:
      - name: "admin"
        key: "edd1c9f034335f136f87ad84b625c8f1"
        role: "admin"
  etcd:
    host:
      - "http://127.0.0.1:2379"
    prefix: "/apisix"
    timeout: 1
--- config
    location /t {
        content_by_lua_block {
            local admin_key = require("apisix.core.admin_key")

            -- Test that admin_key_required returns true
            local required = admin_key.admin_key_required()
            ngx.say("admin_key_required: ", tostring(required))

            -- Test get_admin_keys function (should have configured key from worker init)
            local keys = admin_key.get_admin_keys()
            ngx.say("get_admin_keys type: ", type(keys))
            if keys then
                ngx.say("keys count: ", #keys)
                if keys[1] then
                    ngx.say("first key name: ", keys[1].name or "nil")
                    ngx.say("first key role: ", keys[1].role or "nil")
                    ngx.say("key value: ", keys[1].key)
                    ngx.say("key is autogenerated: ", tostring(keys[1].autogenerated == true))
                    ngx.say("key matches config: ", tostring(keys[1].key == "edd1c9f034335f136f87ad84b625c8f1"))

                    -- Test API access with the configured key
                    local http = require "resty.http"
                    local httpc = http.new()

                    local uri = "http://127.0.0.1:" .. ngx.var.server_port .. "/apisix/admin/routes"
                    local res, err = httpc:request_uri(uri, {
                        method = "GET",
                        headers = {
                            ["X-API-KEY"] = "edd1c9f034335f136f87ad84b625c8f1"
                        }
                    })

                    if res then
                        ngx.say("api access with configured key: ", res.status)
                    else
                        ngx.say("api access failed: ", err or "unknown error")
                    end
                end
            else
                ngx.say("keys: nil")
            end
        }
    }
--- request
GET /t
--- response_body
admin_key_required: true
get_admin_keys type: table
keys count: 1
first key name: admin
first key role: admin
key value: edd1c9f034335f136f87ad84b625c8f1
key is autogenerated: false
key matches config: true
api access with configured key: 200
--- no_error_log
WARNING: using empty Admin API.



=== TEST 3: test admin_key_required disabled
--- http_config
    lua_shared_dict admin_keys 1m;
--- yaml_config
apisix:
  node_listen: 1984
deployment:
  role: traditional
  role_traditional:
    config_provider: etcd
  admin:
    admin_key_required: false
  etcd:
    host:
      - "http://127.0.0.1:2379"
    prefix: "/apisix"
    timeout: 1
--- config
    location /t {
        content_by_lua_block {
            local admin_key = require("apisix.core.admin_key")

            -- Test that admin_key_required returns false when disabled
            local required = admin_key.admin_key_required()
            ngx.say("admin_key_required: ", tostring(required))

            -- Test get_admin_keys function (should be empty when disabled)
            local keys = admin_key.get_admin_keys()
            ngx.say("get_admin_keys type: ", type(keys))
            ngx.say("keys count: ", keys and #keys or 0)

            -- Test API access without key when auth is disabled
            local http = require "resty.http"
            local httpc = http.new()

            local uri = "http://127.0.0.1:" .. ngx.var.server_port .. "/apisix/admin/routes"
            local res, err = httpc:request_uri(uri, {
                method = "GET"
                -- No X-API-KEY header when admin_key_required is false
            })

            if res then
                ngx.say("api access without key: ", res.status)
            else
                ngx.say("api access failed: ", err or "unknown error")
            end
        }
    }
--- request
GET /t
--- response_body
admin_key_required: false
get_admin_keys type: table
keys count: 0
api access without key: 200
--- no_error_log
WARNING: using empty Admin API.
