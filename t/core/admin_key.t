#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
use t::APISIX 'no_plan';

repeat_each(1);
no_long_string();
no_root_location();
log_level("info");

run_tests;

__DATA__

=== TEST 1: test admin_key is empty string
--- yaml_config
apisix:
  node_listen: 1984
deployment:
  role: traditional
  role_traditional:
    config_provider: etcd
  admin:
    admin_key:
      - name: "admin"
        key: ""
        role: "admin"
  etcd:
    host:
      - "http://127.0.0.1:2379"
    prefix: "/apisix"
    timeout: 1
--- config
    location /t {
        content_by_lua_block {
            local admin_key = require("apisix.core.admin_key")

            -- Test admin_key_required function
            local required = admin_key.admin_key_required()
            ngx.say("admin_key_required: ", tostring(required))

            -- Test init function
            admin_key.init()
            ngx.say("init: ok")

            -- Test get_admin_keys function
            local keys = admin_key.get_admin_keys()
            ngx.say("get_admin_keys type: ", type(keys))
            if keys then
                ngx.say("keys count: ", #keys)
                if keys[1] then
                    ngx.say("first key length: ", string.len(keys[1].key))
                    ngx.say("key is autogenerated: ", tostring(keys[1].autogenerated))
                end
            else
                ngx.say("keys: nil")
            end
        }
    }
--- request
GET /t
--- response_body
admin_key_required: true
init: ok
get_admin_keys type: table
keys count: 1
first key length: 32
key is autogenerated: true



=== TEST 2: test admin_key is valid
--- yaml_config
apisix:
  node_listen: 1984
deployment:
  role: traditional
  role_traditional:
    config_provider: etcd
  admin:
    admin_key:
      - name: "admin"
        key: "edd1c9f034335f136f87ad84b625c8f1"
        role: "admin"
  etcd:
    host:
      - "http://127.0.0.1:2379"
    prefix: "/apisix"
    timeout: 1
--- config
    location /t {
        content_by_lua_block {
            local admin_key = require("apisix.core.admin_key")

            -- Test admin_key_required function
            local required = admin_key.admin_key_required()
            ngx.say("admin_key_required: ", tostring(required))

            -- Test init function
            admin_key.init()
            ngx.say("init: ok")

            -- Test get_admin_keys function
            local keys = admin_key.get_admin_keys()
            ngx.say("get_admin_keys type: ", type(keys))
            if keys then
                ngx.say("keys count: ", #keys)
                if keys[1] then
                    ngx.say("first key name: ", keys[1].name or "nil")
                    ngx.say("first key role: ", keys[1].role)
                    ngx.say("first key autogenerated: ", tostring(keys[1].autogenerated))
                    ngx.say("first key value: ", keys[1].key or "nil")
                end
            else
                ngx.say("keys: nil")
            end

            -- Test API access with valid key (collection endpoint)
            local http = require "resty.http"
            local httpc = http.new()

            local uri = "http://127.0.0.1:" .. ngx.var.server_port .. "/apisix/admin/routes"
            local res, err = httpc:request_uri(uri, {
                method = "GET",
                headers = {
                    ["X-API-KEY"] = "edd1c9f034335f136f87ad84b625c8f1"
                }
            })

            if not res then
                ngx.log(ngx.ERR, err)
                return
            end

            ngx.say("collection endpoint status: ", res.status)
        }
    }
--- request
GET /t
--- response_body
admin_key_required: true
init: ok
get_admin_keys type: table
keys count: 1
first key name: admin
first key role: admin
first key autogenerated: false
first key value: edd1c9f034335f136f87ad84b625c8f1
collection endpoint status: 200
