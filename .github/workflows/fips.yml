name: CI FIPS

on:
  push:
    branches: [master]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  pull_request:
    branches: [master]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

permissions:
  contents: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - ubuntu-20.04
        os_name:
          - linux_openresty
        test_dir:
          - t/plugin/jwt-auth2.t t/plugin/hmac-auth2.t t/plugin/redirect.t t/plugin/http-logger.t t/plugin/clickhouse-logger.t t/plugin/openid-connect.t t/plugin/jwt-auth.t t/plugin/google-cloud-logging.t t/plugin/hmac-auth.t t/plugin/prometheus.t t/plugin/authz-keycloak.t t/plugin/batch-requests.t t/plugin/elasticsearch-logger.t
          - t/admin/ssl* t/admin/schema.t t/admin/upstream.t t/config-center-yaml/ssl.t t/core/etcd-mtls.t t/core/config_etcd.t t/deployment/conf_server.t t/misc/patch.t
          - t/node/grpc-proxy-unary.t t/node/upstream-keepalive-pool.t t/node/upstream-websocket.t t/node/client-mtls.t t/node/upstream-mtls.t t/pubsub/kafka.t t/router/radixtree-sni2.t t/router/multi-ssl-certs.t t/router/radixtree-sni.t t/stream-node/mtls.t t/stream-node/tls.t t/stream-node/upstream-tls.t t/stream-node/sni.t

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 90
    env:
      SERVER_NAME: ${{ matrix.os_name }}
      OPENRESTY_VERSION: default

    steps:
      - name: Check out code
        uses: actions/checkout@v3.1.0
        with:
          submodules: recursive

      - name: Cache deps
        uses: actions/cache@v3
        env:
          cache-name: cache-deps
        with:
          path: deps
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.os_name }}-${{ hashFiles('rockspec/apisix-master-0.rockspec') }}

      - name: Cache openssl-3.0 compilation
        id: cache-openssl
        uses: actions/cache@v3
        env:
          cache-name: cache-openssl
        with:
          path: ~/openssl-3.0
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.os_name }}

      - name: Toggle openssl compile
        id: test_ssl_env
        shell: bash
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          echo "##[set-output name=openssl3;]$(echo 'yes')"
          echo "##[set-output name=openssl3_prefix;]$HOME"

      - name: Extract test type
        shell: bash
        id: test_env
        run: |
          test_dir="${{ matrix.test_dir }}"
          if [[ $test_dir =~ 't/plugin' ]]; then
            echo "##[set-output name=type;]$(echo 'plugin')"
          fi
          if [[ $test_dir =~ 't/admin' ]]; then
            echo "##[set-output name=type;]$(echo 'first')"
          fi
          if [[ $test_dir =~ 't/node' ]]; then
            echo "##[set-output name=type;]$(echo 'last')"
          fi

      - name: Linux launch common services
        run: |
          make ci-env-up project_compose_ci=ci/pod/docker-compose.common.yml

      - name: Start CI env (FIRST_TEST)
        if: steps.test_env.outputs.type == 'first'
        run: |
          # launch deps env
          make ci-env-up project_compose_ci=ci/pod/docker-compose.${{ steps.test_env.outputs.type }}.yml

      - name: Start CI env (PLUGIN_TEST)
        if: steps.test_env.outputs.type == 'plugin'
        run: |
          # download keycloak cas provider
          sudo wget https://github.com/jacekkow/keycloak-protocol-cas/releases/download/18.0.2/keycloak-protocol-cas-18.0.2.jar -O /opt/keycloak-protocol-cas-18.0.2.jar

          sh ci/pod/openfunction/build-function-image.sh
          make ci-env-up project_compose_ci=ci/pod/docker-compose.${{ steps.test_env.outputs.type }}.yml
          sudo ./ci/init-${{ steps.test_env.outputs.type }}-test-service.sh

      - name: Start CI env (LAST_TEST)
        if: steps.test_env.outputs.type == 'last'
        run: |
          # generating SSL certificates for Kafka
          sudo keytool -genkeypair -keyalg RSA -dname "CN=127.0.0.1" -alias 127.0.0.1 -keystore ./ci/pod/kafka/kafka-server/selfsigned.jks -validity 365 -keysize 2048 -storepass changeit
          make ci-env-up project_compose_ci=ci/pod/docker-compose.${{ steps.test_env.outputs.type }}.yml
          sudo ./ci/init-${{ steps.test_env.outputs.type }}-test-service.sh

      - name: Linux Before install
        run: sudo ./ci/${{ matrix.os_name }}_runner.sh before_install

      - name: Linux Install
        env:
          COMPILE_OPENSSL3: ${{ steps.test_ssl_env.outputs.openssl3 }}
          OPENSSL3_PREFIX: ${{ steps.test_ssl_env.outputs.openssl3_prefix }}
          USE_OPENSSL3: yes
        run: |
          sudo --preserve-env=OPENRESTY_VERSION \
          --preserve-env=COMPILE_OPENSSL3 \
          --preserve-env=OPENSSL3_PREFIX \
          --preserve-env=USE_OPENSSL3 \
          ./ci/${{ matrix.os_name }}_runner.sh do_install

      - name: Linux Script
        env:
          TEST_FILE_SUB_DIR: ${{ matrix.test_dir }}
        run: sudo -E ./ci/${{ matrix.os_name }}_runner.sh script
