name: CI

on:
  push:
    branches: ['fix/decrease-ci-time']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/master' && github.run_number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - ubuntu-20.04
        os_name:
          - linux_openresty
          - linux_openresty_1_19
        test_dir:
          - t/plugin/[a-k]*
          - t/plugin/[l-z]*
          - t/admin t/cli t/config-center-yaml t/control t/core t/debug t/deployment t/discovery t/error_page t/misc
          - t/node t/pubsub t/router t/script t/secret t/stream-node t/utils t/wasm t/xds-library t/xrpc

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 90
    env:
      SERVER_NAME: ${{ matrix.os_name }}
      OPENRESTY_VERSION: default

    steps:
      - name: Check out code
        uses: actions/checkout@v3.2.0
        with:
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.17"

      - name: Cache deps
        uses: actions/cache@v3
        env:
          cache-name: cache-deps
        with:
          path: deps
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.os_name }}-${{ hashFiles('rockspec/apisix-master-0.rockspec') }}

      - name: Extract test type
        shell: bash
        id: test_env
        run: |
          test_dir="${{ matrix.test_dir }}"
          if [[ $test_dir =~ 't/plugin' ]]; then
            echo "type=plugin" >>$GITHUB_OUTPUT
          fi
          if [[ $test_dir =~ 't/admin ' ]]; then
            echo "type=first" >>$GITHUB_OUTPUT
          fi
          if [[ $test_dir =~ ' t/xrpc' ]]; then
            echo "type=last" >>$GITHUB_OUTPUT
          fi
      
      - name: Cache images
        id: cache-images
        uses: actions/cache@v3
        env:
          cache-name: cache-apisix-docker-images
        with:
          path: docker-images-buckup
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.os_name }}-${{ steps.test_env.outputs.type }}

      - if: ${{ steps.cache-images.outputs.cache-hit == 'true' }}
        name: Load saved docker images
        run: |
          if [[ -f docker-images-buckup/apisix-images.tar ]]; then
            echo "load saved images..., time: $(date)"
            docker load --input docker-images-buckup/apisix-images.tar
            echo "load saved images done, time: $(date)"
            if [[ ${{ steps.test_env.outputs.type }} == 'last' ]]; then
              # generating SSL certificates for Kafka
              sudo keytool -genkeypair -keyalg RSA -dname "CN=127.0.0.1" -alias 127.0.0.1 -keystore ./ci/pod/kafka/kafka-server/selfsigned.jks -validity 365 -keysize 2048 -storepass changeit
            fi
            if [[ ${{ steps.test_env.outputs.type }} == 'plugin' ]]; then
              # download keycloak cas provider
              sudo wget https://github.com/jacekkow/keycloak-protocol-cas/releases/download/18.0.2/keycloak-protocol-cas-18.0.2.jar -O /opt/keycloak-protocol-cas-18.0.2.jar
            fi
            make ci-env-up project_compose_ci=ci/pod/docker-compose.${{ steps.test_env.outputs.type }}.yml
            if [[ ${{ steps.test_env.outputs.type }} != 'first' ]]; then
              sudo ./ci/init-${{ steps.test_env.outputs.type }}-test-service.sh
            fi
            echo "lanuch saved images done, time: $(date)"
          fi
      - if: ${{ steps.cache-images.outputs.cache-hit != 'true' }}
        name: Linux lanuch services
        run: |
          echo "start common service..., time: $(date)"
          make ci-env-up project_compose_ci=ci/pod/docker-compose.common.yml
          echo "start common service done, time: $(date)"
          if [[ ${{ steps.test_env.outputs.type }} == 'first' ]]; then
            # launch deps env
            echo "start first service ..., time: $(date)"
            make ci-env-up project_compose_ci=ci/pod/docker-compose.${{ steps.test_env.outputs.type }}.yml
            echo "start first service done, time: $(date)"
          fi
          
          if [[ ${{ steps.test_env.outputs.type }} == 'plugin' ]]; then
            echo "start plugin service ..., time: $(date)"
            # download keycloak cas provider
            sudo wget https://github.com/jacekkow/keycloak-protocol-cas/releases/download/18.0.2/keycloak-protocol-cas-18.0.2.jar -O /opt/keycloak-protocol-cas-18.0.2.jar
            bash ci/pod/openfunction/build-function-image.sh
            make ci-env-up project_compose_ci=ci/pod/docker-compose.${{ steps.test_env.outputs.type }}.yml
            sudo ./ci/init-${{ steps.test_env.outputs.type }}-test-service.sh
            echo "start plugin service done, time: $(date)"
          fi
          if [[ ${{ steps.test_env.outputs.type }} == 'last' ]]; then
            echo "start last service ..., time: $(date)"
            # generating SSL certificates for Kafka
            sudo keytool -genkeypair -keyalg RSA -dname "CN=127.0.0.1" -alias 127.0.0.1 -keystore ./ci/pod/kafka/kafka-server/selfsigned.jks -validity 365 -keysize 2048 -storepass changeit
            make ci-env-up project_compose_ci=ci/pod/docker-compose.${{ steps.test_env.outputs.type }}.yml
            sudo ./ci/init-${{ steps.test_env.outputs.type }}-test-service.sh
            echo "start last service done, time: $(date)"
          fi
          echo "started backing up, time: $(date)"
          mkdir docker-images-buckup
          sum=$( cat ci/pod/docker-compose.common.yml|grep image |wc -l)
          common_tag=$(cat ci/pod/docker-compose.common.yml|grep image:|awk '{print $2}'|awk 'ORS=NR%"'$sum'"?" ":"\n"{print}')
          echo common tag: $common_tag
          sum=$( cat ci/pod/docker-compose.${{ steps.test_env.outputs.type }}.yml|grep image |wc -l)
          special_tag=$(cat ci/pod/docker-compose.${{ steps.test_env.outputs.type }}.yml|grep image:|awk '{print $2}'|awk 'ORS=NR%"'$sum'"?" ":"\n"{print}')
          echo special: $special_tag
          openwhisk_tag="openwhisk/action-nodejs-v14:nightly openwhisk/standalone:nightly"
          echo
          echo common_tag: $common_tag
          echo special_tag: $special_tag
          echo openwhisk_tag: $openwhisk_tag
          echo
          docker save $common_tag $special_tag $openwhisk_tag -o docker-images-buckup/apisix-images.tar
          echo "docker save done, time: $(date)"
      # - name: Setup tmate session
      #   if: always()
      #   uses: mxschmitt/action-tmate@v3
      - name: Remove source code
        if: ${{ startsWith(github.ref, 'refs/heads/release/') }}
        run: |
          rm -rf $(ls -1 --ignore=*.tgz --ignore=ci --ignore=t --ignore=utils --ignore=.github)
          tar zxvf ${{ steps.branch_env.outputs.fullname }}

      - name: Start Dubbo Backend
        if: matrix.os_name == 'linux_openresty' && steps.test_env.outputs.type == 'plugin'
        run: |
          sudo apt install -y maven
          cd t/lib/dubbo-backend
          mvn package
          cd dubbo-backend-provider/target
          java -Djava.net.preferIPv4Stack=true -jar dubbo-demo-provider.one-jar.jar > /tmp/java.log &

      - name: Build xDS library
        if: steps.test_env.outputs.type == 'last'
        run: |
          cd t/xds-library
          go build -o libxds.so -buildmode=c-shared main.go export.go

      - name: Build wasm code
        if: matrix.os_name == 'linux_openresty' && steps.test_env.outputs.type == 'last'
        run: |
          export TINYGO_VER=0.20.0
          wget https://github.com/tinygo-org/tinygo/releases/download/v${TINYGO_VER}/tinygo_${TINYGO_VER}_amd64.deb 2>/dev/null
          sudo dpkg -i tinygo_${TINYGO_VER}_amd64.deb
          cd t/wasm && find . -type f -name "*.go" | xargs -Ip tinygo build -o p.wasm -scheduler=none -target=wasi p

      - name: Linux Before install
        run: sudo ./ci/${{ matrix.os_name }}_runner.sh before_install

      - name: Linux Install
        run: |
          sudo --preserve-env=OPENRESTY_VERSION \
          ./ci/${{ matrix.os_name }}_runner.sh do_install
