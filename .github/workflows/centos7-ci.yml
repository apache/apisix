name: CI Centos7

on:
  push:
    branches: [master, 'release/**']
    paths-ignore:
      - 'docs/**'
  pull_request:
    branches: [master]
    paths-ignore:
      - 'docs/**'

jobs:
  test_apisix:
    name: run ci on centos7
    runs-on: ubuntu-latest

    services:
      etcd:
        image: bitnami/etcd:3.4.0
        ports:
          - 2379:2379
          - 2380:2380
        env:
          ALLOW_NONE_AUTHENTICATION: yes
          ETCD_ADVERTISE_CLIENT_URLS: http://0.0.0.0:2379

    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Extract branch name
      if: ${{ startsWith(github.ref, 'refs/heads/release/') }}
      id: branch_env
      shell: bash
      run: |
        echo "##[set-output name=version;]$(echo ${GITHUB_REF##*/})"

    - name: Build rpm package
      if: ${{ startsWith(github.ref, 'refs/heads/release/') }}
      run: |
        export VERSION=${{ steps.branch_env.outputs.version }}
        sudo gem install --no-document fpm
        git clone https://github.com/api7/apisix-build-tools.git
        cd apisix-build-tools
        make package type=rpm app=apisix version=${VERSION} checkout=release/${VERSION}
        cd ..
        rm -rf $(ls -1 --ignore=apisix-build-tools --ignore=t --ignore=utils --ignore=ci --ignore=Makefile --ignore=rockspec)

    - name: Install Redis Cluster
      run: |
        docker run -d -p ${MASTER1_PORT}:6379 -p ${MASTER2_PORT}:6380 -p ${MASTER3_PORT}:6381 -p ${SLAVE1_PORT}:6382 -p ${SLAVE2_PORT}:6383 -p ${SLAVE3_PORT}:6384 --name redis-cluster vishnunair/docker-redis-cluster:latest
      env:
        MASTER1_PORT: 5000
        MASTER2_PORT: 5001
        MASTER3_PORT: 5002
        SLAVE1_PORT: 5003
        SLAVE2_PORT: 5004
        SLAVE3_PORT: 5005

    - name: Running Redis Cluster Test
      run: |
        sudo apt-get install -y redis-tools
        docker ps -a
        redis-cli -h 127.0.0.1 -p 5000 ping
        redis-cli -h 127.0.0.1 -p 5000 cluster nodes

    - name: Running etcd server with TLS
      run: |
        sudo docker run -d -p 12379:12379 -p 12380:12380 \
        -e ALLOW_NONE_AUTHENTICATION=yes \
        -e ETCD_ADVERTISE_CLIENT_URLS=https://0.0.0.0:12379 \
        -e ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:12379 \
        -e ETCD_CERT_FILE=/certs/etcd.pem \
        -e ETCD_KEY_FILE=/certs/etcd.key \
        -e GITHUB_ACTIONS=true \
        -e CI=true \
        -v /home/runner/work/apisix/apisix/t/certs:/certs \
        bitnami/etcd:3.4.0

    - name: Run centos7 docker and mapping apisix into container
      run: |
        docker run -itd -v /home/runner/work/apisix/apisix:/apisix --name centos7Instance --net="host" docker.io/centos:7 /bin/bash
        # docker exec centos7Instance bash -c "cp -r /tmp/apisix ./"

    - name: Run other docker containers for test
      run: |
        docker run --rm -itd -p 6379:6379 --name apisix_redis redis:3.0-alpine
        docker run --rm -itd -e HTTP_PORT=8888 -e HTTPS_PORT=9999 -p 8888:8888 -p 9999:9999 mendhak/http-https-echo
        docker run --rm -itd -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=123456 -p 8090:8080 -p 8443:8443 sshniro/keycloak-apisix:1.0.0
        docker network create kafka-net --driver bridge
        docker run --name zookeeper-server -d -p 2181:2181 --network kafka-net -e ALLOW_ANONYMOUS_LOGIN=yes bitnami/zookeeper:3.6.0
        docker run --name kafka-server1 -d --network kafka-net -e ALLOW_PLAINTEXT_LISTENER=yes -e KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-server:2181 -e KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092 -p 9092:9092 -e KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true bitnami/kafka:latest
        docker run --name eureka -d -p 8761:8761 --env ENVIRONMENT=apisix --env spring.application.name=apisix-eureka --env server.port=8761 --env eureka.instance.ip-address=127.0.0.1 --env eureka.client.registerWithEureka=true --env eureka.client.fetchRegistry=false --env eureka.client.serviceUrl.defaultZone=http://127.0.0.1:8761/eureka/ bitinit/eureka
        sleep 5
        docker exec -i kafka-server1 /opt/bitnami/kafka/bin/kafka-topics.sh --create --zookeeper zookeeper-server:2181 --replication-factor 1 --partitions 1 --topic test2
        docker exec -i kafka-server1 /opt/bitnami/kafka/bin/kafka-topics.sh --create --zookeeper zookeeper-server:2181 --replication-factor 1 --partitions 3 --topic test3
        docker run --rm --name skywalking -d -p 1234:1234 -p 11800:11800 -p 12800:12800 apache/skywalking-oap-server:8.3.0-es6
        docker run --rm --name consul_1 -d -p 8500:8500 consul:1.7 consul agent -server -bootstrap-expect=1 -client 0.0.0.0 -log-level info -data-dir=/consul/data
        docker run --rm --name consul_2 -d -p 8600:8500 consul:1.7 consul agent -server -bootstrap-expect=1 -client 0.0.0.0 -log-level info -data-dir=/consul/data

        # start nacos server
        nohup docker network rm nacos_net > /dev/null 2>&1 &
        nohup docker network create nacos_net > /dev/null 2>&1 &
        # nacos no auth server - for test no auth
        docker run --rm -d --name nacos_no_auth --network nacos_net --hostname nacos2 --env NACOS_SERVERS="nacos1:8848 nacos2:8848" --env PREFER_HOST_MODE=hostname --env MODE=cluster --env EMBEDDED_STORAGE=embedded  --env JVM_XMS=512m --env JVM_XMX=512m --env JVM_XMN=256m -p8858:8848 nacos/nacos-server:1.4.1
        # nacos auth server - for test auth
        docker run --rm -d --name nacos_auth --network nacos_net --hostname nacos1 --env NACOS_AUTH_ENABLE=true --env NACOS_SERVERS="nacos1:8848 nacos2:8848" --env PREFER_HOST_MODE=hostname --env MODE=cluster --env EMBEDDED_STORAGE=embedded  --env JVM_XMS=512m --env JVM_XMX=512m --env JVM_XMN=256m -p8848:8848 nacos/nacos-server:1.4.1
        url="127.0.0.1:8858/nacos/v1/ns/service/list?pageNo=1&pageSize=2"
        until  [[ "$(curl -s -o /dev/null -w ''%{http_code}'' $url)"  == "200" ]]; do
          echo 'wait nacos server...'
          sleep 1;
        done
        # register nacos service
        rm -rf tmp
        mkdir tmp
        cd tmp
        wget https://raw.githubusercontent.com/api7/nacos-test-service/main/spring-nacos-1.0-SNAPSHOT.jar
        curl https://raw.githubusercontent.com/api7/nacos-test-service/main/Dockerfile | docker build -t nacos-test-service:1.0-SNAPSHOT -f - .
        docker run -d --rm --network nacos_net --env SERVICE_NAME=APISIX-NACOS --env NACOS_ADDR=nacos2:8848 --env SUFFIX_NUM=1 -p 18001:18001 --name nacos-service1 nacos-test-service:1.0-SNAPSHOT
        docker run -d --rm --network nacos_net --env SERVICE_NAME=APISIX-NACOS --env NACOS_ADDR=nacos2:8848 --env SUFFIX_NUM=2 -p 18002:18001 --name nacos-service2 nacos-test-service:1.0-SNAPSHOT
        url="127.0.0.1:18002/hello"
        until  [[ "$(curl -s -o /dev/null -w ''%{http_code}'' $url)"  == "200" ]]; do
          echo 'wait nacos service...'
          sleep 1;
        done
        until  [[ $(curl -s "127.0.0.1:8858/nacos/v1/ns/service/list?pageNo=1&pageSize=2" | grep "APISIX-NACOS") ]]; do
          echo 'wait nacos reg...'
          sleep 1;
        done
        cd ..

    - name: Install dependencies
      run: |
        docker exec centos7Instance bash -c "cd apisix && ./ci/centos7-ci.sh install_dependencies"

    - name: Install rpm package
      if: ${{ startsWith(github.ref, 'refs/heads/release/') }}
      run: |
        docker exec centos7Instance bash -c "cd apisix && rpm -iv --prefix=/apisix ./apisix-build-tools/output/apisix-${{ steps.branch_env.outputs.version }}-0.x86_64.rpm"
        # Dependencies are attached with rpm, so revert `make deps`
        docker exec centos7Instance bash -c "cd apisix && rm -rf deps"
        docker exec centos7Instance bash -c "cd apisix && mv usr/bin . && mv usr/local/apisix/* ."

    - name: Run test cases
      run: |
        docker exec centos7Instance bash -c "cd apisix && ./ci/centos7-ci.sh run_case"

    - name: Publish Artifact
      if: ${{ startsWith(github.ref, 'refs/heads/release/') }}
      uses: actions/upload-artifact@v2.2.3
      with:
        name: "rpm"
        path: "./apisix-build-tools/output/apisix-${{ steps.branch_env.outputs.version }}-0.x86_64.rpm"
