name: CLI Test

on:
  push:
    branches: [master, 'release/**']
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  pull_request:
    branches: [master, 'release/**']
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/master' && github.run_number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - ubuntu-18.04
        job_name:
          - linux_apisix_current_luarocks
          - linux_apisix_current_luarocks_in_customed_nginx

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 15
    env:
      SERVER_NAME: ${{ matrix.job_name }}
      OPENRESTY_VERSION: default

    steps:
      - name: Check out code
        uses: actions/checkout@v2.4.0
        with:
          submodules: recursive

      - name: Cache deps
        uses: actions/cache@v2.1.7
        env:
          cache-name: cache-deps
        with:
          path: deps
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.job_name }}-${{ hashFiles('rockspec/apisix-master-0.rockspec') }}

      - name: Linux launch common services
        run: |
          project_compose_ci=ci/pod/docker-compose.common.yml make ci-env-up

      - name: Linux Get dependencies
        run: sudo apt install -y cpanminus build-essential libncurses5-dev libreadline-dev libssl-dev perl libpcre3 libpcre3-dev libldap2-dev

      - name: Linux Before install
        run: sudo ./ci/${{ matrix.job_name }}_runner.sh before_install

      - name: Linux Install
        run: |
            sudo --preserve-env=OPENRESTY_VERSION \
            ./ci/${{ matrix.job_name }}_runner.sh do_install

      - name: Setup kubernetes cluster
        run: |
          KIND_VERSION="v0.11.1"
          KUBECTL_VERSION="v1.22.0"
          curl -Lo ./kind "https://kind.sigs.k8s.io/dl/${KIND_VERSION}/kind-$(uname)-amd64"
          curl -Lo ./kubectl "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          chmod +x ./kind
          chmod +x ./kubectl

          ./kind create cluster --name apisix-test --config ./t/discovery/kubernetes/kind.yaml

          ./kubectl wait --for=condition=Ready nodes --all

          ./kubectl apply -f ./t/discovery/kubernetes/account.yaml

          ./kubectl proxy -p 6645

          KUBERNETES_CLIENT_TOKEN_CONTENT=$(./kubectl get secrets | grep apisix-test | awk '{system("./kubectl get secret -o jsonpath={.data.token} "$1" | base64 --decode")}')

          KUBERNETES_CLIENT_TOKEN_DIR="/tmp/var/run/secrets/kubernetes.io/serviceaccount"

          KUBERNETES_CLIENT_TOKEN_FILE=${KUBERNETES_CLIENT_TOKEN_DIR}/token

          mkdir -p ${KUBERNETES_CLIENT_TOKEN_DIR}
          echo -n "$KUBERNETES_CLIENT_TOKEN_CONTENT" > ${KUBERNETES_CLIENT_TOKEN_FILE}

          echo 'KUBERNETES_SERVICE_HOST=127.0.0.1'
          echo 'KUBERNETES_SERVICE_PORT=6443'
          echo 'KUBERNETES_CLIENT_TOKEN='"${KUBERNETES_CLIENT_TOKEN_CONTENT}"
          echo 'KUBERNETES_CLIENT_TOKEN_FILE='${KUBERNETES_CLIENT_TOKEN_FILE}

      - name: Linux Script
        run: sudo ./ci/${{ matrix.job_name }}_runner.sh script
