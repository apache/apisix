--
-- Licensed to the Apache Software Foundation (ASF) under one or more
-- contributor license agreements.  See the NOTICE file distributed with
-- this work for additional information regarding copyright ownership.
-- The ASF licenses this file to You under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with
-- the License.  You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--

--- Admin key management for APISIX
--
-- @module core.admin_key

local fetch_local_conf = require("apisix.core.config_local").local_conf
local try_read_attr    = require("apisix.core.table").try_read_attr
local log              = require("apisix.core.log")
local string           = string
local math             = math
local ipairs           = ipairs
local type             = type

local _M = {version = 0.1}

-- Internal structure to store all admin keys (both from config and autogenerated)
local admin_keys_cache = {}

--- Get all admin keys (from config and autogenerated)
-- @treturn table array of admin key objects with role, key, and optional autogenerated fields
function _M.get_admin_keys()
    return admin_keys_cache
end

--- Check if admin keys are required based on configuration
-- @treturn boolean true if admin keys are required, false otherwise
function _M.admin_key_required()
    local local_conf = fetch_local_conf()
    if not local_conf.deployment or not local_conf.deployment.admin then
        return true -- default to required if not specified
    end

    return local_conf.deployment.admin.admin_key_required ~= false
end

--- Initialize the admin key system
function _M.init()
    local local_conf = fetch_local_conf()
    admin_keys_cache = {}

    -- Check if deployment.role is either traditional or control_plane
    local deployment_role = local_conf.deployment and local_conf.deployment.role
    if not deployment_role or (deployment_role ~= "traditional" and deployment_role ~= "control_plane") then
        return
    end

    -- Get admin keys from config
    local config_admin_keys = try_read_attr(local_conf, "deployment", "admin", "admin_key")
    if not config_admin_keys or type(config_admin_keys) ~= "table" then
        return
    end

    local has_autogenerated = false
    for i, admin_key in ipairs(config_admin_keys) do
        local key_entry = {
            role = admin_key.role,
            key = admin_key.key
        }

        -- If key is empty, generate a random one in memory
        if admin_key.role == "admin" and admin_key.key == "" then
            -- Log warning header only once
            if not has_autogenerated then
                log.warn("WARNING: One or more admin API keys were empty in configuration.")
                log.warn("Temporary keys have been generated for this session:")
                has_autogenerated = true
            end

            local key = ""
            for _ = 1, 32 do
                key = key .. string.char(math.random(65, 90) + math.random(0, 1) * 32)
            end
            key_entry.key = key
            key_entry.autogenerated = true
            log.warn("  Generated admin key: ", key)
        end

        admin_keys_cache[#admin_keys_cache + 1] = key_entry
    end

    -- Final warning message if any keys were autogenerated
    if has_autogenerated then
        log.warn("These keys will change on every restart.")
        log.warn("Please set permanent admin_key values in conf/config.yaml.")
    end
end

--- Clear the cache (useful for testing)
function _M._clear_cache()
    admin_keys_cache = {}
end

return _M
