--
-- Licensed to the Apache Software Foundation (ASF) under one or more
-- contributor license agreements.  See the NOTICE file distributed with
-- this work for additional information regarding copyright ownership.
-- The ASF licenses this file to You under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with
-- the License.  You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--

--- Load or generate admin keys.
--
-- @module core.admin_key

local fetch_local_conf = require("apisix.core.config_local").local_conf
local try_read_attr    = require("apisix.core.table").try_read_attr
local log              = require("apisix.core.log")
local string           = string
local math             = math
local ipairs           = ipairs
local type             = type

local _M = {version = 0.1}
local admin_keys_cache = {}

function _M.get_admin_keys()
    -- Lazy loading: only load keys when actually needed
    if #admin_keys_cache == 0 then
        _M.load_keys_from_shared_memory()
    end
    return admin_keys_cache
end

function _M.admin_key_required()
    local local_conf = fetch_local_conf()
    return local_conf.deployment.admin.admin_key_required
end

function _M.init_worker()
    local local_conf = fetch_local_conf()
    local deployment_role = local_conf.deployment and local_conf.deployment.role

    if local_conf.deployment.admin.admin_key_required == false then
        return
    end

    if not deployment_role or
    (deployment_role ~= "traditional" and deployment_role ~= "control_plane") then
        return
    end

    local config_admin_keys = try_read_attr(local_conf, "deployment", "admin", "admin_key")
    if not config_admin_keys or type(config_admin_keys) ~= "table" then
        return
    end

    local admin_keys_shm = ngx.shared.admin_keys
    if not admin_keys_shm then
        log.error("admin_keys shared memory zone not configured")
        return
    end

    -- Check if already initialized by another worker
    if admin_keys_shm:get("completed") then
        _M.load_keys_from_shared_memory()
        return
    end

    -- Atomic check-and-set: only one worker can claim initialization
    local claimed_init = admin_keys_shm:safe_add("init_claimed", ngx.worker.id() or 0, 5)
    if not claimed_init then
        -- Another worker is handling initialization, no waiting needed
        -- Keys will be loaded lazily when first accessed via get_admin_keys()
        return
    end

    -- This worker won the initialization race
    local generated_keys = {}
    local has_autogenerated = false

    for i, admin_key in ipairs(config_admin_keys) do
        local key_id = "admin_key_" .. i
        local key_value = admin_key.key

        if admin_key.role == "admin" and admin_key.key == "" then
            has_autogenerated = true
            local key = ""
            for _ = 1, 32 do
                key = key .. string.char(math.random(65, 90) + math.random(0, 1) * 32)
            end
            key_value = key
            generated_keys[#generated_keys + 1] = key
            admin_keys_shm:set(key_id .. "_autogenerated", true)
        end

        admin_keys_shm:set(key_id, key_value)
        admin_keys_shm:set(key_id .. "_role", admin_key.role)
        admin_keys_shm:set(key_id .. "_name", admin_key.name or "")
    end

    admin_keys_shm:set("total_keys", #config_admin_keys)

    -- Mark as completed (atomic operation for all waiting workers)
    admin_keys_shm:set("completed", true)

    if has_autogenerated then
        local warning_msg = [=[

WARNING: using empty Admin API.
                    This will trigger APISIX to automatically generate a random Admin API token.

Generated admin keys for this session:]=]

        for _, key in ipairs(generated_keys) do
            warning_msg = warning_msg .. "\n  " .. key
        end

        warning_msg = warning_msg .. [=[

These keys will change on every restart.
Please modify "admin_key" in conf/config.yaml .]=]

        log.warn(warning_msg)
    end

    _M.load_keys_from_shared_memory()
end

function _M.load_keys_from_shared_memory()
    local admin_keys_shm = ngx.shared.admin_keys
    if not admin_keys_shm then
        return
    end

    local total_keys = admin_keys_shm:get("total_keys") or 0
    admin_keys_cache = {}

    for i = 1, total_keys do
        local key_id = "admin_key_" .. i
        local key_value = admin_keys_shm:get(key_id)
        local role = admin_keys_shm:get(key_id .. "_role")
        local name = admin_keys_shm:get(key_id .. "_name")
        local autogenerated = admin_keys_shm:get(key_id .. "_autogenerated") or false

        if key_value and role then
            admin_keys_cache[#admin_keys_cache + 1] = {
                name = name ~= "" and name or nil,
                role = role,
                key = key_value,
                autogenerated = autogenerated
            }
        end
    end
end

return _M
