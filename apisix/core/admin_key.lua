--
-- Licensed to the Apache Software Foundation (ASF) under one or more
-- contributor license agreements.  See the NOTICE file distributed with
-- this work for additional information regarding copyright ownership.
-- The ASF licenses this file to You under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with
-- the License.  You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--

--- Load or generate admin keys.
--
-- @module core.admin_key

local fetch_local_conf = require("apisix.core.config_local").local_conf
local try_read_attr    = require("apisix.core.table").try_read_attr
local core_table       = require("apisix.core.table")
local log              = require("apisix.core.log")
local string           = string
local math             = math
local ipairs           = ipairs
local type             = type
local ngx              = ngx

local admin_key_shm_name = "admin-keys"
local _M = {}
local admin_keys_cache = {}

function _M.admin_key_required()
    local local_conf = fetch_local_conf()
    return local_conf.deployment.admin.admin_key_required
end

function _M.get_admin_keys()
    -- First check if admin key is required at all
    if not _M.admin_key_required() then
        -- When admin keys are not required, return empty table
        return {}
    end

    -- First, try to load from cache
    if #admin_keys_cache > 0 then
        return admin_keys_cache
    end

    -- Try loading from shared memory
    local admin_keys_shm = ngx.shared[admin_key_shm_name]
    if not admin_keys_shm then
        log.error("admin-keys shared memory zone not configured")
        return
    end
    local keys = {}
    local i = 1

    while true do
        local key_id = "admin_key_" .. i
        local key_value = admin_keys_shm:get(key_id)
        if not key_value then
            break
        end

        local role = admin_keys_shm:get(key_id .. "_role")

        if key_value and role then
            local name = admin_keys_shm:get(key_id .. "_name")
            local autogenerated = admin_keys_shm:get(key_id .. "_autogenerated") or false
            core_table.insert(keys, {
                name = name ~= "" and name or nil,
                role = role,
                key = key_value,
                autogenerated = autogenerated
            })
        end
        i = i + 1
    end
    if #keys > 0 then
        admin_keys_cache = keys
    end

    return admin_keys_cache
end

function _M.init_worker()
    local local_conf = fetch_local_conf()
    if not local_conf or not local_conf.deployment then
        log.error("admin_key: no deployment configuration found, skipping initialization")
        return
    end
    local deployment_role = local_conf.deployment.role

    if local_conf.deployment.admin and local_conf.deployment.admin.admin_key_required == false then
        log.debug("admin_key: admin_key_required is false, skipping initialization")
        return
    end

    if not deployment_role or
    (deployment_role ~= "traditional" and deployment_role ~= "control_plane") then
        log.debug("admin_key: deployment role '", deployment_role,
          "' does not require admin keys, skipping initialization")
        return
    end

    local config_admin_keys = try_read_attr(local_conf, "deployment", "admin", "admin_key")
    if not config_admin_keys or type(config_admin_keys) ~= "table" then
        return
    end

    local admin_keys_shm = ngx.shared[admin_key_shm_name]
    if not admin_keys_shm then
        log.error("admin-keys shared memory zone not configured")
        return
    end

    -- Only one worker can claim initialization, this flag will only be cleared on full restart
    local claimed_init = admin_keys_shm:safe_add("status", "locked")
    if not claimed_init then
        -- Another worker is handling initialization, no waiting needed
        -- Keys will be loaded lazily when first accessed via get_admin_keys()
        log.debug("admin_key: another worker is handling initialization, worker ",
          ngx.worker.id() or 0,
          " will load keys lazily")
        return
    end

    -- This worker won the initialization race

    log.debug("admin_key: worker ", ngx.worker.id() or 0,
          " claimed initialization, processing ",
          #config_admin_keys, " admin keys")

    local generated_keys = {}
    local has_autogenerated = false

    for i, admin_key in ipairs(config_admin_keys) do
        local key_id = "admin_key_" .. i
        local key_value = admin_key.key

        if admin_key.role == "admin" and admin_key.key == "" then
            has_autogenerated = true
            local key = ""
            for _ = 1, 32 do
                key = key .. string.char(math.random(65, 90) + math.random(0, 1) * 32)
            end
            key_value = key
            core_table.insert(generated_keys, key)
            admin_keys_shm:set(key_id .. "_autogenerated", true)
        end

        admin_keys_shm:set(key_id, key_value)
        admin_keys_shm:set(key_id .. "_role", admin_key.role)
        admin_keys_shm:set(key_id .. "_name", admin_key.name or "")
    end

    if has_autogenerated then
        local warning_msg = [=[

WARNING: using empty Admin API.
                    This will trigger APISIX to automatically generate a random Admin API token.

Generated admin keys for this session:]=]

        for _, key in ipairs(generated_keys) do
            warning_msg = warning_msg .. "\n  " .. key
        end

        warning_msg = warning_msg .. [=[

These keys will change on every restart.
Please modify "admin_key" in conf/config.yaml .]=]

        log.warn(warning_msg)
    end
end

return _M
