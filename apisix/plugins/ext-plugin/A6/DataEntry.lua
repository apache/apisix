--
-- Licensed to the Apache Software Foundation (ASF) under one or more
-- contributor license agreements.  See the NOTICE file distributed with
-- this work for additional information regarding copyright ownership.
-- The ASF licenses this file to You under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with
-- the License.  You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--
-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: A6

local flatbuffers = require('flatbuffers')

local DataEntry = {} -- the module
local DataEntry_mt = {} -- the class metatable

function DataEntry.New()
    local o = {}
    setmetatable(o, {__index = DataEntry_mt})
    return o
end
function DataEntry.GetRootAsDataEntry(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = DataEntry.New()
    o:Init(buf, n + offset)
    return o
end
function DataEntry_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function DataEntry_mt:Name()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function DataEntry_mt:Value(j)
    local o = self.view:Offset(6)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:Get(flatbuffers.N.Uint8, a + ((j-1) * 1))
    end
    return 0
end
function DataEntry_mt:ValueLength()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function DataEntry.Start(builder) builder:StartObject(2) end
function DataEntry.AddName(builder, name) builder:PrependUOffsetTRelativeSlot(0, name, 0) end
function DataEntry.AddValue(builder, value) builder:PrependUOffsetTRelativeSlot(1, value, 0) end
function DataEntry.StartValueVector(builder, numElems) return builder:StartVector(1, numElems, 1) end
function DataEntry.End(builder) return builder:EndObject() end

return DataEntry -- return the module
